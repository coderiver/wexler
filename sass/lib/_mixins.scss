
$break-small-middle: 480px;
$break-small: 767px;
$break-large: 768px;
$break-large-right: 1024px;
$break-desktop: 940px;
$break-desktop-wide: 1160px;

@mixin respond-to($media) {
	@if $media == mobile {
		@media only screen and (max-width: $break-small) { @content; }
	}
	@else if $media == tablet {
		@media only screen and (min-width: $break-large) and (max-width: $break-large-right) { @content; }
	}
	@else if $media == tablet-portrait {
		@media only screen and (min-width: $break-large) and (max-width: $break-large-right) and (orientation:portrait) { @content; }
	}
	@else if $media == desktop {
		@media only screen and (min-width: $break-desktop) and (max-width: $break-desktop-wide){ @content; }
	}
	@else if $media == desktop-wide {
		@media only screen and (min-width: $break-desktop-wide){ @content; }
	}
	@else if $media == mobile-landscape{
		@media only screen and (min-width: $break-small-middle) and (max-width: $break-small) { @content; }
	}
	@else if $media == mobile-landscape-small{
		@media only screen and (max-width: $break-small-middle) { @content; }
	}

}
// retina bg
@mixin retina{
  @media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-pixel-ratio: 2) {
    @content;
  }
}

// BACKGROUND SIZE
@mixin background-size($width: 100%, $height: 100%) {
     -moz-background-size: $width $height;
  -webkit-background-size: $width $height;
          background-size: $width $height;
}
// ROTATE
@mixin rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0) {
     -moz-transform: rotate($deg + deg);
       -o-transform: rotate($deg + deg);
  -webkit-transform: rotate($deg + deg);
      -ms-transform: rotate($deg + deg);
          transform: rotate($deg + deg);
             filter: progid:DXImageTransform.Microsoft.Matrix(
                     M11=$m11, M12=$m12,M21=$m21, M22=$m22, sizingMethod='auto expand');
               zoom: 1;
}

// TRANSITION
@mixin transition($what: all, $length: 1s, $easing: ease-in-out) {
	-moz-transition:    $what $length $easing;
	-o-transition:      $what $length $easing;
	-webkit-transition: $what $length $easing;
	-ms-transition:     $what $length $easing;
	transition:         $what $length $easing;
}

@mixin unselectable() {
    -webkit-touch-callout : none;
    -webkit-user-select   : none;
    -khtml-user-select    : none;
    -moz-user-select      : none;
    -ms-user-select       : none;
    user-select           : none;
}
@mixin prevent-text(){
   -ms-word-break: break-all;
       word-break: break-all;
       word-break: break-word;
  -webkit-hyphens: auto;
     -moz-hyphens: auto;
          hyphens: auto;
}
@mixin selection {
	& ::selection {
		@content;
	}
	& ::-moz-selection {
		@content;
	}
}
// sized sprites
@mixin image-size($path){
	width: image-width($path);
	height: image-height($path);
}
@mixin sized-sprite($map, $sprite){
	background: sprite($map, $sprite) no-repeat;
	@include image-size(sprite-file($map, $sprite));
}

@mixin sized-sprite-2x($map, $sprite){
	background: sprite($map, $sprite) no-repeat;
	background-position: 0 round(nth(sprite-position($map, $sprite), 2) / 2);
	height: round(image-height(sprite-file($map, $sprite)) / 2);
	width: round(image-width(sprite-file($map, $sprite)) /2 );
	@include background-size(ceil(image-width(sprite-path($map)) / 2),ceil(image-height(sprite-path($map)) / 2));
}